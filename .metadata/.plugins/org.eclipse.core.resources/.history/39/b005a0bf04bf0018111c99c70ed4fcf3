import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


import com.opencsv.CSVReader;


public class BestIndex {
	
	public static void main(String[] args) throws NumberFormatException, IOException{
		BestIndex bi = new BestIndex();
		BufferedReader br = new BufferedReader(
                new InputStreamReader(System.in));
		 
		 int n = Integer.parseInt(br.readLine());
		 System.out.println("Enter the number of elements");
		 int arr[] = new int[n];
		 System.out.println("Enter each space separated elements");
		 String s = br.readLine();
		 String []sArray = s.split(" ");
		 for(int i=0;i<n;i++){
			 arr[i] = Integer.parseInt(sArray[i]);
		}
		System.out.println(bi.findSumOfPerfectSquare(arr,n));
		//bi.readAllData();
		/*String s1 = "cde";
		String s2 = "abc";
		bi.printNumOfDeletionsForAnagram(s1, s2);*/
		
		/*
		Arrays.sort(arr);
		int sum = arr[arr.length-1] + 1;
		bi.printOffer(arr, n);*/
		/*int []arr = new int[]{1,4,2,3};
		int n=4;*/
		System.out.println(bi.findSumOfPerfectSquare(arr,n));
	}
	
	public int calculateSingleDigitSum(int n,int value){
		
		value += n%10;
		n = n/10;
		if(n>0){
			return calculateSingleDigitSum(n, value);
		}
		else if(value > 9){
			return calculateSingleDigitSum(value, 0);
		}
		
		return value;
	}
	
	public int findBestIndexValue(int arr[]){
		int value = 0;
		 for(int i =0;i<arr.length;i++){
			 int temp = findMaximumSpecialValue(arr, i);
			if(value < temp){
				value = temp;
			}
			
		 }
		return value;
	}
	
	public int findMaximumSpecialValue(int arr[],int firstIndex){
		int value =0;
		int loopCount=1;
		for(int i=firstIndex;i<arr.length;i++){
			value += calculateSum(arr,loopCount,i);
			loopCount++;
		}
	return value;
	}
	
	public int calculateSum(int arr[],int loopCount,int index){
		int value =0;
		for(int i=index;i<arr.length && loopCount >0;i++){
			value += arr[i];
			loopCount --;
		}
		return value;
	}
	
	public void printNumOfDeletionsForAnagram(String str1,String str2){
		int arr1[] = new int[256];
        int arr2[] = new int[256];
        int c = 0;
        Arrays.fill(arr1,0);
        Arrays.fill(arr2,0);
        for(int j=0;j<str1.length();j++){
            arr1[str1.charAt(j)]++;
        }
        for(int j=0;j<str2.length();j++){
            arr2[str2.charAt(j)]++;
        }
        for(int j=0;j<256;j++){
            c += (Math.abs(arr1[j]-arr2[j]));
        }
        System.out.println(c);
	}
	
	public void printOffer(int arr[],int n){
		int l = 0;
		int r = arr.length - 1;
		boolean found = false;
		if(n > Math.pow(10, 2)){
			System.out.println("Fake Offer");
			return;
		}
		else{
			while(l < r){
				if((arr[l] + arr[r] == n)||(arr[l]+arr[l] == n)||(arr[r]+arr[r]== n)){
					found = true;
					break;
				}
				else if(((n-(arr[l]+arr[r]))%arr[l] == 0) || ((n-(arr[l]+arr[r]))%arr[r] == 0) || ((n-(arr[l]+arr[l]))%arr[l]== 0) 
						|| ((n-(arr[l]+arr[l]))%arr[r]== 0) || ((n-(arr[r]+arr[r]))%arr[l]== 0) || (n-(arr[r]+arr[r]))%arr[r]== 0){
					found = true;
					break;
				}
				else if(arr[l] + arr[r] < n){
					l++;
				}else if(arr[l] + arr[r] > n){
					r--;
				}
				
			}
			if(found){
				printOffer(arr, n+1);
			}else{
				System.out.println(n);
				return;
			}
		}
	}
	

	
	private static final String CSV_FILE_PATH = "C:/Users/Sutirtha/MyJavaWorkSpace/gs-maven/src/main/java/org/springframework/gs_maven/source/TED-22kData.csv";
	
	public CSVReader readAllData(){

	    try { 
	    	List<TedVOTest> tedVOList =  new ArrayList<TedVOTest>();
	        // Create an object of filereader 
	        // class with CSV file as a parameter. 
	        FileReader filereader = new FileReader(CSV_FILE_PATH); 
	  
	        // create csvReader object passing 
	        // file reader as a parameter 
	        CSVReader csvReader = new CSVReader(filereader); 
	        String[] nextRecord; 
	        /*ColumnPositionMappingStrategy cpm = new ColumnPositionMappingStrategy();
            cpm.setType(TedVO.class);
            String[] csvcolumns = new String[]{"description", "event", "main_speaker", "name", "published_date", "ratings", "related_talks", "speaker_occupation", "tags", "title", "url", "views"};
            cpm.setColumnMapping(csvcolumns);
            
            
            	
	        // we are going to read data line by line 
            CsvToBean csvtobean = new CsvToBean();
            List csvDataList = csvtobean.parse(cpm, csvReader);
            for (Object dataobject : csvDataList) {
                TedVO profile = (TedVO) dataobject;
                System.out.println("Firstname:"+profile.getDescription()+
               " LastName:"+profile.getEvent()+" Age:"+profile.getMainSpeaker());
            }*/
	        while ((nextRecord = csvReader.readNext()) != null) { 
	        	TedVOTest ted = new TedVOTest();
	        	
	            for (String cell : nextRecord) { 
	            	ted.setDescription(cell);
	            	System.out.print(cell + "\t"); 
	            	System.out.println("Description:"+ted.getDescription());
	                
	            } 
	            System.out.println(); 
	        }
	        return csvReader;
	    } 
	    catch (Exception e) { 
	        e.printStackTrace(); 
	    } 
	    return null;
	}

	public int findSumOfPerfectSquare(int arr[],int n){
		int count = 0;
        // Pick starting point
        for (int i=0; i <n; i++)
        {
            // Pick ending point
            for (int j=i; j<n; j++)
            {
                // Print subarray between current starting
                // and ending points
            	int sum = 0;
                for (int k=i; k<=j; k++)
                	sum+=arr[k];
                	count = findSumIsPerfectSquare(sum, count);
            }
        }
        return count;
	}
	
	public int findSumIsPerfectSquare(int sum, int count){
		double sum1 = sum;
		double sr = Math.sqrt(sum1);
		if(sr-Math.floor(sr) == 0){
			count++;
		}
		return count;
	}
}
