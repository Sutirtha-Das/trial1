
public class BinaryTree {
	// Root of Binary Tree
    Node root;
 
    // Constructors
    BinaryTree(int key)
    {
        root = new Node(key);
    }
 
    BinaryTree()
    {
        root = null;
    }
    
    public  Node LCA(Node root, int n1, int n2) 
    {
        if (root == null)
            return root;
        if (root.key == n1 || root.key == n2)
            return root;
 
        Node left = LCA(root.left, n1, n2);
        Node right = LCA(root.right, n1, n2);
 
        if (left != null && right != null)
            return root;
        if (left != null)
            return LCA(root.left, n1, n2);
        else
            return LCA(root.right, n1, n2);
    }
    
    public  int findLevel(Node root, int a, int level)
    {
        if (root == null)
            return -1;
        if (root.key == a)
            return level;
        int left = findLevel(root.left, a, level + 1);
        if (left == -1)
            return findLevel(root.right, a, level + 1);
        return left;
    }
    
    public  int findDistance(Node root, int a, int b)
    {
        Node lca = LCA(root, a, b);
 
        int d1 = findLevel(lca, a, 0);
        int d2 = findLevel(lca, b, 0);
 
        return d1 + d2;
    }
    
    public void findAllNodes(Node node){
    	
    }
 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 BinaryTree tree = new BinaryTree();
		 
	        /*create root*/
	        tree.root = new Node(1);
	 
	        /* following is the tree after above statement
	 
	              1
	            /   \
	          null  null     */
	 
	        tree.root.left = new Node(2);
	        tree.root.right = new Node(3);
	 
	        /* 2 and 3 become left and right children of 1
	               1
	             /   \
	            2      3
	          /    \    /  \
	        null null null null  */
	 
	 
	        tree.root.left.left = new Node(4);
	        System.out.println(
                    + tree.findDistance(tree.root, 3, 4));
	        System.out.println(
                    + tree.findDistance(tree.root, 2,4));
	        
                     
/*System.out.println("Dist(4, 6) = "
                    + findDistance(root, 4, 6));
                     
System.out.println("Dist(3, 4) = "
                    + findDistance(root, 3, 4));
                     
System.out.println("Dist(2, 4) = "
                    + findDistance(root, 2, 4));
                     
System.out.println("Dist(8, 5) = "
                    + findDistance(root, 8, 5));*/
	}

}

/* Class containing left and right child of current
node and key value*/
class Node
{
 int key;
 Node left, right;

 public Node(int item)
 {
     key = item;
     left = right = null;
 }
}
