/**
 * 
 */
package com.rabobank.com.rabobank.processor;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.rabobank.com.rabobank.config.RabobankConfig;
import com.rabobank.com.rabobank.model.InvalidRecords;
import com.rabobank.com.rabobank.model.Records;
import com.rabobank.com.rabobank.service.RaboBankValidationService;

/**
 * @author Sutirtha
 *
 */
@RestController
@RequestMapping("processReport")
public class RaboBankReportProcessor {
	
	@Autowired
	RabobankConfig config;
	
	@Autowired
	private RaboBankValidationService validationService;
	
	@RequestMapping("/validateRecords")
	public List<InvalidRecords> validateTransactionRecords() throws JAXBException{
		List<InvalidRecords> recordList = new ArrayList<InvalidRecords>();
		Records recordsFromXml  = readFromXML();
		try {
			Records recordsFromCSV = readFromCSV();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		validationService.validateTransactionRecords(recordsFromXml);
		validationService.validateTransactionRecords(recordsFromCSV);
		return recordList;
	}
	
	private Records readFromXML() throws JAXBException{
		File xmlFile = new File(config.getReadXMLSourcefilePath());
		JAXBContext jaxbContext = JAXBContext.newInstance(Records.class);
		Unmarshaller jaxbUnmarshall = jaxbContext.createUnmarshaller();
		Records records = (Records) jaxbUnmarshall.unmarshal(xmlFile);
		System.out.println(records.toString());
		return records;
	}
	
	private Records readFromCSV() throws IOException{
		BufferedReader reader = new BufferedReader(new FileReader(config.getReadCSVSourcefilePath()));
		String line = reader.readLine();
		List<Records.Record> recList = new ArrayList<>();
		try {
			while((line = reader.readLine()) != null && !line.isEmpty()){
				Records.Record recordProp = new Records.Record();
				String[] fields = line.split(",");
				String reference = fields[0];
				String accountNumber = fields[1];
				String description = fields[2];
				double startBalance = new Double(fields[3]);
				double mutation = new Double(fields[4]);
				double endBalance = new Double(fields[5]);
				recordProp.setReference(Integer.parseInt(reference));
				recordProp.setAccountNumber(accountNumber);
				recordProp.setDescription(description);
				recordProp.setStartBalance(startBalance);
				recordProp.setMutation(mutation);
				recordProp.setEndBalance(endBalance);
				System.out.println(recordProp.toString());
				recList.add(recordProp);
			}
		} catch (NumberFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		Records records = new Records();
		records.getRecord().addAll(recList);
		return records;
	
	}
	
}
