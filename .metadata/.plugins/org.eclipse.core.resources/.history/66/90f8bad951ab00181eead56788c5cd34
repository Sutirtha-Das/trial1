package com.BinaryTrees;

import java.util.ArrayList;
import java.util.Arrays;

public class LearnArray {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[] arr= new int[]{1,2,3,4,5,6};
		/*printArray(arr);
		leftRotate(arr, 5, 1);*/
		int[] newArr =  new int[]{0, -10, 1, 3, -20};
		//minimumBribe(newArr);
		//System.out.println(mimumPositiveNumber(arr,0));
		System.out.println(mimumPositiveNumber(newArr,0));
	}
	public static void printArray(int arr[]){
		for(int i=0;i<arr.length;i++){
			System.out.print(arr[i]);
		}
		System.out.println(" ");
	}
	public static void leftRotate(int arr[],int d, int n){
		for(int j=0;j<d;j++){
			leftRotateByN(arr, n);
			printArray(arr);
		}
	}
	public static void leftRotateByN(int arr[],int n){
		int i;
		int temp = arr[0];
		for(i=0;i<arr.length-1;i++){
			arr[i] = arr[i+1];
		}
		arr[i]=temp;
	}
	
	public static void minimumBribe(int arr[]){
		int bribeCount = 0;
		ArrayList<Integer> list =  new ArrayList<Integer>();
		for(int i=arr.length;i>=1;i--){
			list.add(i);
		}
		for(int i=0;i<arr.length;i++){
			if(list.get(list.size()-1)==arr[i]){
				list.remove(list.size()-1);
			}
			else if(list.get(list.size()-2)==arr[i]){
				bribeCount++;
				list.remove(list.size()-2);
			}
			else if(list.get(list.size()-3)==arr[i]){
				bribeCount +=2;
				list.remove(list.size()-3);
			}
			else{
				bribeCount = -100000000;
			}
		}
		if(bribeCount < 0){
			System.out.println("Too chaotic");
		}
		else{
			System.out.println(bribeCount);
		}
		
	}
	
	public static int mimumPositiveNumber(int arr[], int retVal){
		Arrays.sort(arr);
		for(int i=0;i<arr.length;i++){
			if(arr[i] == 0){
				retVal = 1;
			}
			else if(arr[i] > 0 && arr[i]>=retVal){
				if(arr[i] != retVal){
					retVal = arr[i] +1;
				}
				else{
					retVal++;
				}
			}
			}	
		
		return retVal;
	}
}
