/**
 * 
 */
package com.rabobank.com.rabobank.service.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.rabobank.com.rabobank.model.InvalidRecords;
import com.rabobank.com.rabobank.model.Records;
import com.rabobank.com.rabobank.model.Records.Record;
import com.rabobank.com.rabobank.service.RaboBankValidationService;

/**
 * @author Sutirtha
 *
 */
@Service
public class RaboBankValidationServiceImpl implements RaboBankValidationService {

	/* (non-Javadoc)
	 * @see com.rabobank.com.rabobank.service.RaboBankValidationService#validateTransactionRecords(com.rabobank.com.rabobank.model.Records)
	 */
	@Override
	public List<InvalidRecords> validateTransactionRecords(Records records) {
		
		
		/*Set<Records.Record> recordList = records.getRecord().stream()
		.filter(i->Collections.frequency(records.getRecord(), i) > 1)
		.collect(Collectors.toSet());*/
		
		
				  
		List<Records.Record> recordList = removeDuplicates(records.getRecord());
		System.out.println(recordList.size());
		recordList.stream().forEach( i ->{
			
			System.out.println(i.getAccountNumber());
		});
		return null;
	}
	
	/*public static List<Object> extractDuplicates( List<Records.Record> record) {
		return null;
	    return record.stream().flatMap(i -> {
	         Integer count = new Integer(0);
	        final List<Records.Record> duplicatedPersons = new ArrayList<>();

	        record.forEach(p -> {

	            if (p.getReference().equals(i.getReference())) {
	                count = count + 1;
	            }

	            if (count > 1) {
	                duplicatedPersons.add(i);
	            }

	        });

	        return duplicatedPersons.stream();
	    }).collect(Collectors.toList());
	}*/
	
	public  static List<Records.Record> removeDuplicates(final List<Records.Record> recordList) {

	    return (List<Record>) recordList.stream().collect(Collectors
	            .collectingAndThen(Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(
	            		RaboBankValidationServiceImpl::uniqueAttributes))),
	                    ArrayList::new));

	}

	 private static Integer uniqueAttributes(Records.Record record){

	    if(Objects.isNull(record)){
	        return 0;
	    }



	    return (record.getReference()) ;
	}
	 
	 private static Map<String, List<Record>> getDuplicatesMap(List<Record> recordList) {
		  return recordList.stream().collect(groupingBy(Record::getReference));
		}	
}
