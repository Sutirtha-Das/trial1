/**
 * 
 */
package com.rabobank.com.rabobank.service.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.rabobank.com.rabobank.model.InvalidRecords;
import com.rabobank.com.rabobank.model.Records;
import com.rabobank.com.rabobank.model.Records.Record;
import com.rabobank.com.rabobank.service.RaboBankValidationService;

/**
 * @author Sutirtha
 *
 */
@Service
public class RaboBankValidationServiceImpl implements RaboBankValidationService {

	/* (non-Javadoc)
	 * @see com.rabobank.com.rabobank.service.RaboBankValidationService#validateTransactionRecords(com.rabobank.com.rabobank.model.Records)
	 */
	@Override
	public List<InvalidRecords> validateTransactionRecords(Records records) {
		
		
		/*Set<Records.Record> recordList = records.getRecord().stream()
		.filter(i->Collections.frequency(records.getRecord(), i) > 1)
		.collect(Collectors.toSet());*/
		
		
		return null;		  
		
	}
	
	/*public static List<Object> extractDuplicates( List<Records.Record> record) {
		return null;
	    return record.stream().flatMap(i -> {
	         Integer count = new Integer(0);
	        final List<Records.Record> duplicatedPersons = new ArrayList<>();

	        record.forEach(p -> {

	            if (p.getReference().equals(i.getReference())) {
	                count = count + 1;
	            }

	            if (count > 1) {
	                duplicatedPersons.add(i);
	            }

	        });

	        return duplicatedPersons.stream();
	    }).collect(Collectors.toList());
	}*/
	
	
	public static List<InvalidRecords> getDuplicates(final List<Records.Record> recordList) {
		List<InvalidRecords> records = new ArrayList<InvalidRecords>();
		Map<Integer, List<Records.Record>> duplicates = getDuplicatesMap(recordList);
		duplicates.forEach((k,v) ->{
			v.forEach( r ->{
				InvalidRecords invalidr = new InvalidRecords(r.getReference(),r.getDescription());
				System.out.println(r.getDescription());
				System.out.println(r.getReference());
				records.add(invalidr);
			});
		});
		
		return records;
		  /*return getDuplicatesMap(recordList).values().stream()
		      .filter(duplicates -> duplicates.size() > 1)
		      .flatMap(Collection::stream)
		      .collect(Collectors.toList());*/
	}
	 private static Map<Integer, List<Records.Record>> getDuplicatesMap(List<Records.Record> recordList) {
		 
		  return recordList.stream().collect(Collectors.groupingBy(Records.Record::getReference));
		}	
}
