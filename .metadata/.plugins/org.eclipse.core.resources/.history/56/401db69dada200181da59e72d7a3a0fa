
public class BinaryTree {
	// Root of Binary Tree
    Node root;
 
    // Constructors
    BinaryTree(int key)
    {
        root = new Node(key);
    }
 
    BinaryTree()
    {
        root = null;
    }
    
    public  Node LCA(Node root, int n1, int n2) 
    {
        if (root == null)
            return root;
        if (root.key == n1 || root.key == n2)
            return root;
 
        Node left = LCA(root.left, n1, n2);
        Node right = LCA(root.right, n1, n2);
 
        if (left != null && right != null)
            return root;
        if (left != null)
            return LCA(root.left, n1, n2);
        else
            return LCA(root.right, n1, n2);
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 BinaryTree tree = new BinaryTree();
		 
	        /*create root*/
	        tree.root = new Node(1);
	 
	        /* following is the tree after above statement
	 
	              1
	            /   \
	          null  null     */
	 
	        tree.root.left = new Node(2);
	        tree.root.right = new Node(3);
	 
	        /* 2 and 3 become left and right children of 1
	               1
	             /   \
	            2      3
	          /    \    /  \
	        null null null null  */
	 
	 
	        tree.root.left.left = new Node(4);
	}

}

/* Class containing left and right child of current
node and key value*/
class Node
{
 int key;
 Node left, right;

 public Node(int item)
 {
     key = item;
     left = right = null;
 }
}
