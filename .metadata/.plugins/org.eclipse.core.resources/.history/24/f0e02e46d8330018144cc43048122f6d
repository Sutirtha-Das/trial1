
public class HelloMethods {
	int a;
	HelloMethods(int x){
		this.a = x;
	}
	HelloMethods(){
		this.a = 0;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Integer i = new Integer(10);
		Integer j = new Integer(20);
		swap(i,j);
		/*Changes done in swap is not reflected in Main method.
		 *Java creates a copy of the variable being passed 
		 * the manipulates the copy of the variable.
		 * So all JAVA PRIMITIVES like int, char etc all always 
		 * PASS BY VALUE  */
		System.out.println("I="+i+"J="+j);
		
		HelloMethods hm = new HelloMethods(30);
		/* This is swap by reference.
		 * A non-primitive like object referenced is passed
		 * Java creates a copy of the parameter, and passes it to method
		 * However its still points to the same memory reference
		 * Value of the calling reference is modifed*/
		
		swapByReference(hm);
		System.out.println("Main=>swapByReference=> HelloMethod.a="+hm.a);
		/* This is swap by value for non-primitive types/references
		 * swapByValue instantiates a new Instance for HelloMethods
		 * Object reference hm, refers to the new memory allocated inside swapByValue
		 * However the calling reference from Main points to the same ol reference */
		swapByValue(hm);
		System.out.println("Main=>swapByValue=> HelloMethod.a="+hm.a);
	}
	public static void swap(Integer i, Integer j){
		Integer temp = new Integer(5);
		i = j;
		j = temp;
		System.out.println("SWAP=> I="+i+"J="+j);
		
		
	}
	
	public static void swapByReference(HelloMethods hm){
		hm.a = 40;
		System.out.println("swapByReference=> HelloMethod.a="+hm.a);
	}
	
	public static void swapByValue(HelloMethods hm){
		hm = new HelloMethods();
		System.out.println("swapByValue=> HelloMethod.a="+hm.a);
	}

}
