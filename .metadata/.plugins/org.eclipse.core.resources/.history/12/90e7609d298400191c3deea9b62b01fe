package singleton;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import decorator.Barbeque;
import decorator.FarmHouse;
import decorator.Jalapeno;
import decorator.Margherita;
import decorator.PeppyPanneer;
import decorator.Pizza;
import prototype.EmployeePrototype;
import proxy.FileInterface;
import proxy.FileInterfaceProxy;
import builder.BankAccount;
import factory.AbstractFactory;
import factory.FactoryProvider;
import factory.Polygon;
import factory.PolygonFactory;

public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//Test for SingleTon
		for(int i=0;i<3;i++){
			Runnable r = () ->{
				Singleton singleton = Singleton.getInstance();
				System.out.println("Singleton:"+singleton);
			};
			new Thread(r).start();
		}
		
		for(int i=0;i<3;i++){
			Runnable r = () ->{
				ThreadSafeSingleton singleton = ThreadSafeSingleton.getInstance();
				System.out.println("ThreadSafeSingleton:"+singleton);
			};
			new Thread(r).start();
		}
		
		for(int i=0;i<3;i++){
			Runnable r = () ->{
				BillPughSingleton singleton = BillPughSingleton.getInstance();
				System.out.println("BillPughSingleton:"+singleton);
			};
			new Thread(r).start();
		}
		
		
		//Test for Factory Pattern
		Polygon polygon = PolygonFactory.getPolygon(3);
		System.out.println(polygon.getType());
		Polygon polygon1 = PolygonFactory.getPolygon(4);
		Polygon polygon2 = PolygonFactory.getPolygon(5);
		
		
		//TestForAbstractFactory
		/*AbstractFactory<T, S> factory = new FactoryProvider(<1, "red">);*/
		
		
		//Test for BuilderPattern
		BankAccount newAccount = new BankAccount
				  .BankAccountBuilder("Jon", "22738022275")
				  .withEmail("jon@example.com")
				  .withNewsLetter(true)
				  .build();
		
		System.out.println(newAccount.getAccountNumber());
		
		
		//Test For Prototype Pattern:
		EmployeePrototype employees = new EmployeePrototype(Arrays.asList("Sutirtha", "Loganathan", "Venu"));
		try {
			EmployeePrototype empNew = (EmployeePrototype)employees.clone();
			empNew.getEmpList().add("Panneer");
			System.out.println("Original:"+employees);
			employees.print();
			System.out.println("Cloned:"+empNew);
			empNew.print();
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//Test for Proxy Pattern
		BankAccount newAccount2 = new BankAccount
				  .BankAccountBuilder("Jon", "22738022275")
				  .withEmail("jon@example.com")
				  .withNewsLetter(false)
				  .build();
		FileInterface file = new FileInterfaceProxy(newAccount);
		try {
			file.writeOutputToFile(newAccount);
			file.writeOutputToFile(newAccount2);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		//Test for Decorator Pattern
		Pizza pizza1 = new Margherita();
		pizza1 = new Jalapeno(pizza1);
		
		Pizza pizza2 = new PeppyPanneer();
		pizza2 = new Barbeque(pizza2);
		
		Pizza pizza3 = new FarmHouse();
		
		List<Pizza> orderList = new ArrayList<Pizza>();
		orderList.add(pizza1);
		orderList.add(pizza2);
		orderList.add(pizza3);
		
		int total = orderList.stream().filter(
				p ->  (p.getDescription() != null))
				.mapToInt(p -> p.getCost()).sum();
		System.out.println(total);
	}
	
	

}
