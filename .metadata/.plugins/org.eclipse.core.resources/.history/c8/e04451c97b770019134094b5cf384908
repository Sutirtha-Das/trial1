package com.Map;

import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class LearnMap {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		HashMap hs = new HashMap();
		hs.put("sui", "1000");
		hs.put("sup", "750");
		hs.put("sun", "500");
		hs.put("rnd", "250");
		System.out.println(hs); 
		/*
		 * op: {sui=1000, rnd=250, sun=500, sup=750}
		 * Since it is map, it is printed withing curly braces
		 * Insertion order is not preserved and insertion is based
		 * on hashcode of the keys.
		 */
		hs.put("Sui", "1000");
		System.out.println(hs);
		/*
		 * op: {sui=1000, Sui=1000, rnd=250, sun=500, sup=750}
		 * Keys are case sensitive here, new Entry is created.
		 * 
		 * 
		 */
		System.out.println(hs.put("Sui", "1005")); 
		//Since key already exists relaces the older value with new, 
		//and returns the old value
		System.out.println(hs);
		
		Set set = hs.keySet();
		System.out.println(set);
		// Returns all the keys as a set.
		// It is a set as all the keys are unique and not in any order.
		// OP: [sui, Sui, rnd, sun, sup], it in square braces as it is 
		// Set, which is a collection.
		
		Collection c = hs.values();
		System.out.println(c);
		// OP: [1000, 1005, 250, 500, 750]
		// Return an collection of the values
		
		Set s1 =  hs.entrySet();
		System.out.println(s1);
		// OP: [sui=1000, Sui=1005, rnd=250, sun=500, sup=750]
		// Returns all the Entries in the Mp, in form of a set
		// Hence printed within [] indicating a collection.
		
		Iterator itr = s1.iterator();
		while(itr.hasNext()){
			Map.Entry e1 =  (Map.Entry)itr.next(); // Fetches each entry of the map
			System.out.println(e1.getKey()+"=="+e1.getValue());
			if(e1.getKey().equals("sui")){
				e1.setValue("2000");
			}
			if(e1.getKey().toString().equalsIgnoreCase("sui")){
				e1.setValue("2005");
			}
		}
	
		System.out.println(hs); //OP: {sui=2005, Sui=2005, rnd=250, sun=500, sup=750}
		
		Map synchMap = Collections.synchronizedMap(hs);
		//This creates a new synchronized map, which is threadsafe
	}

}
